[{"C:\\udemy\\dotReact\\client-app\\src\\index.tsx":"1","C:\\udemy\\dotReact\\client-app\\src\\reportWebVitals.ts":"2","C:\\udemy\\dotReact\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\udemy\\dotReact\\client-app\\src\\features\\nav\\NavBar.tsx":"4","C:\\udemy\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\udemy\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"6","C:\\udemy\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"7","C:\\udemy\\dotReact\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"8","C:\\udemy\\dotReact\\client-app\\src\\app\\api\\agent.ts":"9"},{"size":540,"mtime":1612729214346,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":2576,"mtime":1612985572258,"results":"13","hashOfConfig":"11"},{"size":750,"mtime":1612979126128,"results":"14","hashOfConfig":"11"},{"size":2088,"mtime":1612979126122,"results":"15","hashOfConfig":"11"},{"size":1983,"mtime":1612979126124,"results":"16","hashOfConfig":"11"},{"size":1468,"mtime":1612979126125,"results":"17","hashOfConfig":"11"},{"size":3420,"mtime":1612979126126,"results":"18","hashOfConfig":"11"},{"size":958,"mtime":1612984295149,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"w30rki",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"C:\\udemy\\dotReact\\client-app\\src\\index.tsx",[],["43","44"],"C:\\udemy\\dotReact\\client-app\\src\\reportWebVitals.ts",[],"C:\\udemy\\dotReact\\client-app\\src\\app\\layout\\App.tsx",["45","46","47"],"C:\\udemy\\dotReact\\client-app\\src\\features\\nav\\NavBar.tsx",[],"C:\\udemy\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",["48","49"],"import React from 'react'\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport ActivityDetails from '../details/ActivityDetails';\r\nimport ActivityForm from '../form/ActivityForm';\r\nimport ActivityList from \"./ActivityList\";\r\n\r\ninterface IProps {\r\n    activities: IActivity[];\r\n    selectActivity: (id: string) => void;\r\n    selectedActivity: IActivity | null;\r\n    editMode: boolean;\r\n    setEditMode: (editMode: boolean) => void;\r\n    setSelectedActivity: (activity: IActivity | null) => void;\r\n    createActivity: (activity: IActivity) => void;\r\n    editActivity: (activity: IActivity) => void;\r\n    deleteActivity: (id: string) => void;\r\n}\r\n\r\nconst ActivityDashboard: React.FC<IProps> = (\r\n    {   activities, \r\n        selectActivity, \r\n        selectedActivity,\r\n        editMode,\r\n        setEditMode,\r\n        setSelectedActivity,\r\n        createActivity,\r\n        editActivity,\r\n        deleteActivity\r\n    }) => {\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityList \r\n                    activities={activities} \r\n                    selectActivity={selectActivity}\r\n                    deleteActivity={deleteActivity}\r\n                />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                {selectedActivity && !editMode && (\r\n                    <ActivityDetails activity={selectedActivity} \r\n                                     setEditMode={setEditMode}\r\n                                     setSelectedActivity={setSelectedActivity}\r\n                    />\r\n                    )}\r\n                {editMode && \r\n                <ActivityForm \r\n                    key={selectedActivity && selectedActivity.id || 0}\r\n                    setEditMode={setEditMode} \r\n                    activity={selectedActivity!}\r\n                    createActivity={createActivity}\r\n                    editActivity={editActivity}\r\n                /> }\r\n            </Grid.Column>\r\n        </Grid>    \r\n    );\r\n};\r\n\r\nexport default ActivityDashboard","C:\\udemy\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",[],"C:\\udemy\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",["50","51"],"import React from 'react'\r\nimport { Card, Image, Button } from 'semantic-ui-react'\r\nimport {IActivity} from \"../../../app/models/activity\";\r\n\r\ninterface IProps {\r\n    activity: IActivity;\r\n    setEditMode: (editMode: boolean) => void;\r\n    setSelectedActivity: (activity: IActivity | null) => void;\r\n}\r\n\r\nconst ActivityDetails: React.FC<IProps> = ({activity, setEditMode, setSelectedActivity}) => {\r\n    return (\r\n        <Card fluid>\r\n            <Image src={`../assets/categoryImages/${activity.category}.jpg`} wrapped ui={false} />\r\n            <Card.Content>\r\n                <Card.Header>{activity.title}</Card.Header>\r\n                <Card.Meta>\r\n                    <span>{activity.date}</span>\r\n                </Card.Meta>\r\n                <Card.Description>\r\n                    {activity.decription}\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Button.Group widths={2 }>\r\n                    <Button onClick={() => setEditMode(true)} \r\n                            basic \r\n                            color='blue' \r\n                            content='Edit'/>\r\n                    <Button onClick={() => setSelectedActivity(null)} \r\n                            basic\r\n                            color='grey'\r\n                            content='Cancel'/>\r\n                </Button.Group>    \r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ActivityDetails","C:\\udemy\\dotReact\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",["52"],"import React, {FormEvent, useState} from 'react'\r\nimport {Button, Form, Segment } from 'semantic-ui-react'\r\nimport {IActivity} from \"../../../app/models/activity\";\r\nimport  {v4 as uuid} from 'uuid';\r\n\r\ninterface IProps {\r\n    setEditMode: (editMode: boolean) => void;\r\n    activity: IActivity;\r\n    createActivity: (activity: IActivity) => void;\r\n    editActivity: (activity: IActivity) => void;\r\n}\r\n\r\nconst ActivityForm: React.FC<IProps> = (\r\n    {   setEditMode, \r\n        activity: initialFormState,\r\n        createActivity,\r\n        editActivity\r\n    }) => {\r\n    \r\n    const intializeForm = () => {\r\n        if (initialFormState) {\r\n            return initialFormState\r\n        } else {\r\n            return {\r\n                id: '',\r\n                title: '',\r\n                category: '',\r\n                decription: '',\r\n                date: '',\r\n                city: '',\r\n                venue: ''\r\n            };\r\n        }\r\n    };\r\n    \r\n    const [activity, setActivity] = useState<IActivity>(intializeForm);\r\n    \r\n    const handleSubmit = () => {\r\n        if (activity.id.length === 0) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n            createActivity(newActivity);\r\n        } else {\r\n            editActivity(activity);\r\n        }\r\n    };\r\n    \r\n    const handleInputChange = (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const {name, value} = event.currentTarget;\r\n        setActivity({...activity, [name]: value})\r\n    };\r\n    \r\n    \r\n    return (\r\n        <Segment clearing>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Input onChange={handleInputChange} \r\n                            name='title' \r\n                            placeholder='Title' \r\n                            value={activity.title}\r\n                />\r\n                <Form.TextArea onChange={handleInputChange}\r\n                               name='decription' rows={2} \r\n                               placeholder='Description' \r\n                               value={activity.decription}\r\n                />\r\n                <Form.Input onChange={handleInputChange}\r\n                            name='category' \r\n                            placeholder='Category' \r\n                            value={activity.category}\r\n                />\r\n                <Form.Input onChange={handleInputChange}\r\n                            name='date'\r\n                            type='datetime-local' \r\n                            placeholder='Date' \r\n                            value={activity.date}\r\n                />\r\n                <Form.Input onChange={handleInputChange}\r\n                            name='city'\r\n                            placeholder='City' \r\n                            value={activity.city}\r\n                />\r\n                <Form.Input onChange={handleInputChange}\r\n                            name='venue' \r\n                            placeholder='Venue' \r\n                            value={activity.venue}\r\n                />\r\n                <Button floated='right' positive type='submit' content='Submit' />\r\n                <Button onClick={() => setEditMode(false)} \r\n                        floated='left' \r\n                        type='button' \r\n                        content='Cancel' />\r\n            </Form>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default ActivityForm","C:\\udemy\\dotReact\\client-app\\src\\app\\api\\agent.ts",["53"],"import axios, {AxiosResponse }from 'axios';\r\nimport { IActivity } from '../models/activity';\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api';\r\n\r\nconst responseBody = (responce: AxiosResponse) => responce.data;\r\n\r\nconst requests = {\r\n    get: (url: string) => axios.get(url).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\r\n    del: (url: string) => axios.delete(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (): Promise<IActivity[]> => requests.get('/activities'),\r\n    details: (id: string) => requests.get(`/activities/${id}`),\r\n    create: (activity: IActivity) => requests.post(`/activities`, activity),\r\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del(`/activities/${id}`)\r\n}\r\n\r\nexport default {\r\n    Activities\r\n}",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":2,"column":20,"nodeType":"60","messageId":"61","endLine":2,"endColumn":26},{"ruleId":"58","severity":1,"message":"62","line":2,"column":28,"nodeType":"60","messageId":"61","endLine":2,"endColumn":32},{"ruleId":"58","severity":1,"message":"63","line":2,"column":34,"nodeType":"60","messageId":"61","endLine":2,"endColumn":38},{"ruleId":"58","severity":1,"message":"64","line":2,"column":9,"nodeType":"60","messageId":"61","endLine":2,"endColumn":18},{"ruleId":"58","severity":1,"message":"63","line":2,"column":26,"nodeType":"60","messageId":"61","endLine":2,"endColumn":30},{"ruleId":"58","severity":1,"message":"62","line":2,"column":23,"nodeType":"60","messageId":"61","endLine":2,"endColumn":27},{"ruleId":"58","severity":1,"message":"65","line":5,"column":11,"nodeType":"60","messageId":"61","endLine":5,"endColumn":17},{"ruleId":"58","severity":1,"message":"65","line":5,"column":11,"nodeType":"60","messageId":"61","endLine":5,"endColumn":17},{"ruleId":"66","severity":1,"message":"67","line":23,"column":1,"nodeType":"68","endLine":25,"endColumn":2},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"@typescript-eslint/no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Icon' is defined but never used.","'List' is defined but never used.","'Container' is defined but never used.","'IProps' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]