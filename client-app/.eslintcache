[{"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\index.tsx":"1","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\api\\agent.ts":"4","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\nav\\NavBar.tsx":"5","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"6","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"7","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"8","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"9"},{"size":540,"mtime":1612884386522,"results":"10","hashOfConfig":"11"},{"size":440,"mtime":1612884386522,"results":"12","hashOfConfig":"11"},{"size":2806,"mtime":1613025446900,"results":"13","hashOfConfig":"11"},{"size":1178,"mtime":1613028809816,"results":"14","hashOfConfig":"11"},{"size":750,"mtime":1612946736098,"results":"15","hashOfConfig":"11"},{"size":2088,"mtime":1612967305404,"results":"16","hashOfConfig":"11"},{"size":1983,"mtime":1612967075449,"results":"17","hashOfConfig":"11"},{"size":1468,"mtime":1612967375783,"results":"18","hashOfConfig":"11"},{"size":3420,"mtime":1612966184824,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"wm7pc1",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\index.tsx",[],["41","42"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\App.tsx",["43","44","45"],"import React, {useState, useEffect, Fragment} from 'react';\r\nimport {Container, Header, Icon, List } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { IActivity } from '../models/activity';\r\nimport NavBar from '../../features/nav/NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport agent from '../api/agent';\r\n\r\nconst App = () => {\r\n    const [activities, setActivities] = useState<IActivity[]>([]);\r\n    const [selectedActivity, setSelectedActivity] = useState<IActivity | null>(null);\r\n    const [editMode, setEditMode] = useState(false);\r\n    \r\n    \r\n    const handleSelectActivity = (id: string) => {\r\n        setSelectedActivity(activities.filter(a => a.id === id)[0]);\r\n        setEditMode(false);\r\n    }\r\n    \r\n    const handleOpenCreateForm = () => {\r\n        setSelectedActivity(null);\r\n        setEditMode(true);\r\n    }\r\n\r\n    const handleCreateActivity = (activity: IActivity) => {\r\n        agent.Activities.create(activity).then(() => {\r\n            setActivities([...activities, activity])\r\n            setSelectedActivity(activity);\r\n            setEditMode(false)   \r\n        })\r\n    }\r\n    \r\n    const handleEditActivity = (activity: IActivity) => {\r\n        agent.Activities.update(activity).then(() => {\r\n            setActivities([...activities.filter(a => a.id !== activity.id)])\r\n            setSelectedActivity(activity)\r\n            setEditMode(false)\r\n        })\r\n    }\r\n    \r\n    const handleDeleteActivity = (id: string) => {\r\n        agent.Activities.delete(id).then(() => {\r\n            setActivities([...activities.filter(a => a.id !== id)]) \r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n          agent.Activities.list() \r\n              .then((response) => {\r\n                  let activities: IActivity[] = [];\r\n                  response.forEach(activity => {\r\n                      activity.date = activity.date.split('.')[0];\r\n                      activities.push(activity);\r\n                  })\r\n                  setActivities(activities)\r\n              });\r\n    }, [])\r\n  \r\n\r\n  return (\r\n    <Fragment>\r\n        <NavBar openCreateForm={handleOpenCreateForm}/>\r\n        <Container style={{marginTop: '7em'}}>\r\n            <ActivityDashboard \r\n                activities={activities}\r\n                selectActivity={handleSelectActivity}\r\n                selectedActivity={selectedActivity!}\r\n                editMode={editMode}\r\n                setEditMode={setEditMode}\r\n                setSelectedActivity={setSelectedActivity}\r\n                createActivity={handleCreateActivity}\r\n                editActivity={handleEditActivity}\r\n                deleteActivity={handleDeleteActivity}\r\n            />\r\n        </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\api\\agent.ts",["46"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\nav\\NavBar.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",["47","48"],"import React from 'react'\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport ActivityDetails from '../details/ActivityDetails';\r\nimport ActivityForm from '../form/ActivityForm';\r\nimport ActivityList from \"./ActivityList\";\r\n\r\ninterface IProps {\r\n    activities: IActivity[];\r\n    selectActivity: (id: string) => void;\r\n    selectedActivity: IActivity | null;\r\n    editMode: boolean;\r\n    setEditMode: (editMode: boolean) => void;\r\n    setSelectedActivity: (activity: IActivity | null) => void;\r\n    createActivity: (activity: IActivity) => void;\r\n    editActivity: (activity: IActivity) => void;\r\n    deleteActivity: (id: string) => void;\r\n}\r\n\r\nconst ActivityDashboard: React.FC<IProps> = (\r\n    {   activities, \r\n        selectActivity, \r\n        selectedActivity,\r\n        editMode,\r\n        setEditMode,\r\n        setSelectedActivity,\r\n        createActivity,\r\n        editActivity,\r\n        deleteActivity\r\n    }) => {\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityList \r\n                    activities={activities} \r\n                    selectActivity={selectActivity}\r\n                    deleteActivity={deleteActivity}\r\n                />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                {selectedActivity && !editMode && (\r\n                    <ActivityDetails activity={selectedActivity} \r\n                                     setEditMode={setEditMode}\r\n                                     setSelectedActivity={setSelectedActivity}\r\n                    />\r\n                    )}\r\n                {editMode && \r\n                <ActivityForm \r\n                    key={selectedActivity && selectedActivity.id || 0}\r\n                    setEditMode={setEditMode} \r\n                    activity={selectedActivity!}\r\n                    createActivity={createActivity}\r\n                    editActivity={editActivity}\r\n                /> }\r\n            </Grid.Column>\r\n        </Grid>    \r\n    );\r\n};\r\n\r\nexport default ActivityDashboard","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":2,"column":20,"nodeType":"55","messageId":"56","endLine":2,"endColumn":26},{"ruleId":"53","severity":1,"message":"57","line":2,"column":28,"nodeType":"55","messageId":"56","endLine":2,"endColumn":32},{"ruleId":"53","severity":1,"message":"58","line":2,"column":34,"nodeType":"55","messageId":"56","endLine":2,"endColumn":38},{"ruleId":"59","severity":1,"message":"60","line":27,"column":1,"nodeType":"61","endLine":29,"endColumn":2},{"ruleId":"62","severity":1,"message":"63","line":50,"column":43,"nodeType":"64","messageId":"65","endLine":50,"endColumn":45},{"ruleId":"62","severity":1,"message":"63","line":50,"column":66,"nodeType":"64","messageId":"65","endLine":50,"endColumn":68},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"@typescript-eslint/no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Icon' is defined but never used.","'List' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation"]