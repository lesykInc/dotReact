[{"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\index.tsx":"1","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\api\\agent.ts":"4","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"5","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\activityStore.ts":"6","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\nav\\NavBar.tsx":"7","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"8","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"9","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"10","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"11","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\store.ts":"12","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\home\\HomePage.tsx":"13","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostList.tsx":"14","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\postStore.ts":"15","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostForm.tsx":"16"},{"size":705,"mtime":1613633347859,"results":"17","hashOfConfig":"18"},{"size":440,"mtime":1612884386522,"results":"19","hashOfConfig":"18"},{"size":1499,"mtime":1613743700250,"results":"20","hashOfConfig":"18"},{"size":1562,"mtime":1613721288110,"results":"21","hashOfConfig":"18"},{"size":401,"mtime":1613030271340,"results":"22","hashOfConfig":"18"},{"size":4770,"mtime":1613648616655,"results":"23","hashOfConfig":"18"},{"size":1250,"mtime":1613752299664,"results":"24","hashOfConfig":"18"},{"size":1100,"mtime":1613668025184,"results":"25","hashOfConfig":"18"},{"size":2266,"mtime":1613633839871,"results":"26","hashOfConfig":"18"},{"size":3510,"mtime":1613633069598,"results":"27","hashOfConfig":"18"},{"size":1945,"mtime":1613640923101,"results":"28","hashOfConfig":"18"},{"size":357,"mtime":1613379190231,"results":"29","hashOfConfig":"18"},{"size":310,"mtime":1613634149570,"results":"30","hashOfConfig":"18"},{"size":4154,"mtime":1613752735431,"results":"31","hashOfConfig":"18"},{"size":4427,"mtime":1613752735460,"results":"32","hashOfConfig":"18"},{"size":2987,"mtime":1613752458496,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"wm7pc1",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"37"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"37"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\index.tsx",["74","75"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './app/layout/styles.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n      <BrowserRouter>\r\n          <App />   \r\n      </BrowserRouter>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["76","77"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\App.tsx",["78","79","80","81"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\api\\agent.ts",["82"],"import axios, {AxiosResponse }from 'axios';\r\nimport { IActivity } from '../models/activity';\r\nimport { IPost } from '../models/post';\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api';\r\n\r\nconst responseBody = (responce: AxiosResponse) => responce.data;\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) => \r\n    new Promise<AxiosResponse>(resolve => setTimeout(()=> resolve(response), ms))\r\n\r\n\r\nconst requests = {\r\n    get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(1000)).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(1000)).then(responseBody),\r\n    del: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (): Promise<IActivity[]> => requests.get('/activities'),\r\n    details: (id: string) => requests.get(`/activities/${id}`),\r\n    create: (activity: IActivity) => requests.post(`/activities`, activity),\r\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del(`/activities/${id}`)\r\n}\r\n\r\nconst Posts = {\r\n    list: (): Promise<IPost[]> => requests.get('/posts'),\r\n    details: (id: string) => requests.get(`/posts/${id}`),\r\n    create: (post: IPost) => requests.post(`/posts`, post),\r\n    update: (post: IPost) => requests.put(`/posts/${post.id}`, post),\r\n    delete: (id: string) => requests.del(`/posts/${id}`)\r\n}\r\n\r\nexport default {\r\n    Activities,\r\n    Posts\r\n}","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\activityStore.ts",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\nav\\NavBar.tsx",["83","84"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",["85","86","87","88"],"import { observer } from 'mobx-react-lite';\r\nimport React, {useContext, useEffect} from 'react'\r\nimport { Grid } from 'semantic-ui-react';\r\nimport ActivityDetails from '../details/ActivityDetails';\r\nimport ActivityForm from '../form/ActivityForm';\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n    \r\n    const activityStore = useContext(ActivityStore);\r\n    const {editMode, activity} = activityStore;\r\n\r\n    useEffect(() => {\r\n        activityStore.loadActivities();\r\n    }, [activityStore])\r\n\r\n    if (activityStore.loadingInitial) return <LoadingComponent content='Loading activities...' />\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityList />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n               <h2>Activity filters</h2>\r\n            </Grid.Column>\r\n        </Grid>    \r\n    );\r\n};     \r\n\r\nexport default observer(ActivityDashboard)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",["89","90"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport { Item, Button, Label, Segment } from 'semantic-ui-react';\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\nimport {makeAutoObservable} from 'mobx';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ActivityList: React.FC = () => {\r\n    \r\n    const activityStore = useContext(ActivityStore);\r\n    const {activitiesByDate, selectActivity, deleteActivity, submitting, target} = activityStore;\r\n    \r\n    return (\r\n        <Segment clearing>\r\n            <Item.Group divided>\r\n                {activitiesByDate.map(activity =>(\r\n                    <Item key={activity.id}>\r\n                        <Item.Content>\r\n                            <Item.Header as='a'>{activity.title}</Item.Header>\r\n                            <Item.Meta>{activity.date}</Item.Meta>\r\n                            <Item.Description>\r\n                                <div>{activity.description}</div>\r\n                                <div>{activity.city}, {activity.venue}</div>\r\n                            </Item.Description>\r\n                            <Item.Extra>\r\n                                <Button\r\n                                    as={Link} to={`/activities/${activity.id}`}\r\n                                    floated='right' \r\n                                    content='View' \r\n                                    color='blue' \r\n                                />\r\n                                <Button\r\n                                    name={activity.id}\r\n                                    loading={target === activity.id && submitting}\r\n                                    onClick={(e) => deleteActivity(e, activity.id)}\r\n                                    floated='right'\r\n                                    content='Delete'\r\n                                    color='red'\r\n                                />\r\n                                <Label basic content={activity.category} />\r\n                            </Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n                ))}\r\n                \r\n            </Item.Group>\r\n        </Segment>\r\n        \r\n    );\r\n};\r\n\r\nexport default observer(ActivityList)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",["91","92"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect } from 'react'\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Card, Image, Button } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\n\r\ninterface DetailsParams {\r\n    id: string;\r\n}\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<DetailsParams>> = ({match}) => {\r\n    \r\n    const activityStore = useContext(ActivityStore);\r\n    const {activity, openEditForm, cancelSelectedActivity, loadActivity, loadingInitial} = activityStore;\r\n    \r\n    useEffect(() => {\r\n        loadActivity(match.params.id)    \r\n    }, [loadActivity]\r\n    )\r\n    \r\n    if (loadingInitial || !activity) return <LoadingComponent content='Loading activity...' />\r\n    \r\n    return (\r\n        <Card fluid>\r\n            <Image src={`../assets/categoryImages/${activity!.category}.jpg`} wrapped ui={false} />\r\n            <Card.Content>\r\n                <Card.Header>{activity!.title}</Card.Header>\r\n                <Card.Meta>\r\n                    <span>{activity!.date}</span>\r\n                </Card.Meta>\r\n                <Card.Description>\r\n                    {activity!.description}\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Button.Group widths={2}>\r\n                    <Button onClick={() => openEditForm(activity!.id)} \r\n                            basic \r\n                            color='blue' \r\n                            content='Edit'/>\r\n                    <Button onClick={() => window.history.back} \r\n                            basic\r\n                            color='grey'\r\n                            content='Cancel'/>\r\n                </Button.Group>    \r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetails)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\store.ts",[],["93","94"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostList.tsx",["95","96","97","98","99","100"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\postStore.ts",["101","102","103"],"import {action, computed, makeAutoObservable, observable, runInAction} from \"mobx\";\r\nimport {createContext, SyntheticEvent, useEffect} from 'react';\r\nimport { IPost } from '../models/post';\r\nimport agent from \"../api/agent\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport {IActivity} from \"../models/activity\";\r\n\r\n\r\nexport class PostStore {\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n    \r\n    @observable postRegistry = new Map();\r\n    @observable posts: IPost[] = [];\r\n    @observable post: IPost | undefined = undefined;\r\n    @observable loadingInitial = false;\r\n    @observable editMode = false;\r\n    @observable submitting = false;\r\n    @observable target = '';\r\n\r\n    @computed get postsByDate() {\r\n        return Array.from(this.postRegistry.values()).slice().sort(\r\n               (a,b) => Date.parse(a.date) - Date.parse(b.date))\r\n    }\r\n    \r\n    @action selectPost = (id: string) => {\r\n        this.post = this.postRegistry.get(id);\r\n        this.editMode = false;\r\n    };\r\n    \r\n    @action loadPosts = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const posts = await agent.Posts.list();\r\n            runInAction(() => {\r\n                posts.forEach(post => {\r\n                    post.createdDate = post.createdDate.split('T')[0];\r\n                    post.lastUpdatedDate = post.lastUpdatedDate.split('T')[0];\r\n                    this.postRegistry.set(post.id, post);\r\n                });\r\n                this.loadingInitial = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingInitial = false;\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n    @action loadPost = async (id: string) => {\r\n        let post = this.getPost(id);\r\n        if (post) {\r\n            this.post = post;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                post = await agent.Posts.details(id);\r\n                runInAction(() => {\r\n                    this.post = post;\r\n                    this.loadingInitial = false;\r\n                })\r\n            } catch (error) {\r\n                runInAction(() => {\r\n                    this.loadingInitial = false;\r\n                })\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n   \r\n    getPost = (id: string) => {\r\n        return this.postRegistry.get(id);\r\n    }\r\n\r\n    @action setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    @action createPost = async (post: IPost) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.Posts.create(post);\r\n            runInAction( () => {\r\n                this.postRegistry.set(post.id, post);\r\n                this.editMode = false;\r\n                this.submitting = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction( () => {\r\n                this.submitting = false;\r\n            })\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    @action editPost = async (post: IPost) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.Posts.update(post);\r\n            runInAction(() => {\r\n                this.postRegistry.set(post.id, post);\r\n                this.post = post;\r\n                this.editMode = false;\r\n                this.submitting = false;\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n            });\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    @action deletePost = async  (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\r\n        this.submitting = true;\r\n        this.target = event.currentTarget.name;\r\n        try {\r\n            await  agent.Posts.delete(id);\r\n            runInAction(() => {\r\n                this.postRegistry.delete(id);\r\n                this.submitting = false;\r\n                this.target = '';\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n                this.target = '';\r\n            });\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n    \r\n    @action cancelFormOpen = () => {\r\n        this.editMode = false;\r\n    }\r\n\r\n    @action openEditForm  = (id: string) => {\r\n        this.post = this.postRegistry.get(id);\r\n        this.editMode = true;\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default createContext(new PostStore());","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostForm.tsx",[],{"ruleId":"104","severity":1,"message":"105","line":7,"column":10,"nodeType":"106","messageId":"107","endLine":7,"endColumn":15},{"ruleId":"104","severity":1,"message":"108","line":7,"column":17,"nodeType":"106","messageId":"107","endLine":7,"endColumn":29},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"104","severity":1,"message":"113","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":26},{"ruleId":"104","severity":1,"message":"114","line":1,"column":38,"nodeType":"106","messageId":"107","endLine":1,"endColumn":48},{"ruleId":"104","severity":1,"message":"115","line":6,"column":8,"nodeType":"106","messageId":"107","endLine":6,"endColumn":24},{"ruleId":"104","severity":1,"message":"116","line":7,"column":8,"nodeType":"106","messageId":"107","endLine":7,"endColumn":21},{"ruleId":"117","severity":1,"message":"118","line":36,"column":1,"nodeType":"119","endLine":39,"endColumn":2},{"ruleId":"104","severity":1,"message":"120","line":6,"column":10,"nodeType":"106","messageId":"107","endLine":6,"endColumn":18},{"ruleId":"104","severity":1,"message":"121","line":11,"column":11,"nodeType":"106","messageId":"107","endLine":11,"endColumn":24},{"ruleId":"104","severity":1,"message":"122","line":4,"column":8,"nodeType":"106","messageId":"107","endLine":4,"endColumn":23},{"ruleId":"104","severity":1,"message":"123","line":5,"column":8,"nodeType":"106","messageId":"107","endLine":5,"endColumn":20},{"ruleId":"104","severity":1,"message":"124","line":13,"column":12,"nodeType":"106","messageId":"107","endLine":13,"endColumn":20},{"ruleId":"104","severity":1,"message":"125","line":13,"column":22,"nodeType":"106","messageId":"107","endLine":13,"endColumn":30},{"ruleId":"104","severity":1,"message":"126","line":5,"column":9,"nodeType":"106","messageId":"107","endLine":5,"endColumn":27},{"ruleId":"104","severity":1,"message":"127","line":11,"column":30,"nodeType":"106","messageId":"107","endLine":11,"endColumn":44},{"ruleId":"104","severity":1,"message":"128","line":15,"column":36,"nodeType":"106","messageId":"107","endLine":15,"endColumn":58},{"ruleId":"129","severity":1,"message":"130","line":19,"column":8,"nodeType":"131","endLine":19,"endColumn":22,"suggestions":"132"},{"ruleId":"109","replacedBy":"133"},{"ruleId":"111","replacedBy":"134"},{"ruleId":"104","severity":1,"message":"135","line":3,"column":23,"nodeType":"106","messageId":"107","endLine":3,"endColumn":28},{"ruleId":"104","severity":1,"message":"126","line":5,"column":9,"nodeType":"106","messageId":"107","endLine":5,"endColumn":27},{"ruleId":"104","severity":1,"message":"136","line":11,"column":25,"nodeType":"106","messageId":"107","endLine":11,"endColumn":35},{"ruleId":"104","severity":1,"message":"137","line":11,"column":37,"nodeType":"106","messageId":"107","endLine":11,"endColumn":47},{"ruleId":"104","severity":1,"message":"138","line":11,"column":49,"nodeType":"106","messageId":"107","endLine":11,"endColumn":59},{"ruleId":"104","severity":1,"message":"139","line":11,"column":61,"nodeType":"106","messageId":"107","endLine":11,"endColumn":67},{"ruleId":"104","severity":1,"message":"113","line":2,"column":24,"nodeType":"106","messageId":"107","endLine":2,"endColumn":33},{"ruleId":"104","severity":1,"message":"140","line":5,"column":10,"nodeType":"106","messageId":"107","endLine":5,"endColumn":18},{"ruleId":"104","severity":1,"message":"141","line":6,"column":9,"nodeType":"106","messageId":"107","endLine":6,"endColumn":18},"@typescript-eslint/no-unused-vars","'store' is defined but never used.","Identifier","unusedVar","'StoreContext' is defined but never used.","no-native-reassign",["142"],"no-negated-in-lhs",["143"],"'useEffect' is defined but never used.","'useContext' is defined but never used.","'LoadingComponent' is defined but never used.","'ActivityStore' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useStore' is defined but never used.","'activityStore' is assigned a value but never used.","'ActivityDetails' is defined but never used.","'ActivityForm' is defined but never used.","'editMode' is assigned a value but never used.","'activity' is assigned a value but never used.","'makeAutoObservable' is defined but never used.","'selectActivity' is assigned a value but never used.","'cancelSelectedActivity' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["144"],["142"],["143"],"'Label' is defined but never used.","'selectPost' is assigned a value but never used.","'deletePost' is assigned a value but never used.","'submitting' is assigned a value but never used.","'target' is assigned a value but never used.","'observer' is defined but never used.","'IActivity' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},"Update the dependencies array to be: [loadActivity, match.params.id]",{"range":"147","text":"148"},[729,743],"[loadActivity, match.params.id]"]