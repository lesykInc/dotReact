[{"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\index.tsx":"1","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\api\\agent.ts":"4","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"5","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\activityStore.ts":"6","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\nav\\NavBar.tsx":"7","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"8","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"9","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"10","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"11","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\store.ts":"12","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\home\\HomePage.tsx":"13","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostList.tsx":"14","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\postStore.ts":"15","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostForm.tsx":"16","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostWarning.tsx":"17","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\postDashboard\\PostDashboard.tsx":"18"},{"size":705,"mtime":1613633347859,"results":"19","hashOfConfig":"20"},{"size":440,"mtime":1612884386522,"results":"21","hashOfConfig":"20"},{"size":1708,"mtime":1613998751706,"results":"22","hashOfConfig":"20"},{"size":1562,"mtime":1613721288110,"results":"23","hashOfConfig":"20"},{"size":401,"mtime":1613030271340,"results":"24","hashOfConfig":"20"},{"size":4831,"mtime":1613997953546,"results":"25","hashOfConfig":"20"},{"size":1276,"mtime":1613980085055,"results":"26","hashOfConfig":"20"},{"size":1100,"mtime":1613984515955,"results":"27","hashOfConfig":"20"},{"size":2266,"mtime":1613633839871,"results":"28","hashOfConfig":"20"},{"size":3877,"mtime":1613999640610,"results":"29","hashOfConfig":"20"},{"size":1946,"mtime":1613984863308,"results":"30","hashOfConfig":"20"},{"size":357,"mtime":1613379190231,"results":"31","hashOfConfig":"20"},{"size":310,"mtime":1613634149570,"results":"32","hashOfConfig":"20"},{"size":2767,"mtime":1613983038317,"results":"33","hashOfConfig":"20"},{"size":4427,"mtime":1613752735460,"results":"34","hashOfConfig":"20"},{"size":2987,"mtime":1613981968338,"results":"35","hashOfConfig":"20"},{"size":1595,"mtime":1613981618616,"results":"36","hashOfConfig":"20"},{"size":379,"mtime":1613980275844,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"wm7pc1",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"41"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"41"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"41"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"41"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\index.tsx",["85","86"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './app/layout/styles.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n      <BrowserRouter>\r\n          <App />   \r\n      </BrowserRouter>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["87","88"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\App.tsx",["89","90","91","92","93"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\api\\agent.ts",["94"],"import axios, {AxiosResponse }from 'axios';\r\nimport { IActivity } from '../models/activity';\r\nimport { IPost } from '../models/post';\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api';\r\n\r\nconst responseBody = (responce: AxiosResponse) => responce.data;\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) => \r\n    new Promise<AxiosResponse>(resolve => setTimeout(()=> resolve(response), ms))\r\n\r\n\r\nconst requests = {\r\n    get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(1000)).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(1000)).then(responseBody),\r\n    del: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (): Promise<IActivity[]> => requests.get('/activities'),\r\n    details: (id: string) => requests.get(`/activities/${id}`),\r\n    create: (activity: IActivity) => requests.post(`/activities`, activity),\r\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del(`/activities/${id}`)\r\n}\r\n\r\nconst Posts = {\r\n    list: (): Promise<IPost[]> => requests.get('/posts'),\r\n    details: (id: string) => requests.get(`/posts/${id}`),\r\n    create: (post: IPost) => requests.post(`/posts`, post),\r\n    update: (post: IPost) => requests.put(`/posts/${post.id}`, post),\r\n    delete: (id: string) => requests.del(`/posts/${id}`)\r\n}\r\n\r\nexport default {\r\n    Activities,\r\n    Posts\r\n}","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\activityStore.ts",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\nav\\NavBar.tsx",["95","96"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {Container, Menu, Button } from 'semantic-ui-react';\r\nimport ActivityStore from '../../app/stores/activityStore';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\n\r\nconst NavBar: React.FC = () => {\r\n    \r\n    const activityStore = useContext(ActivityStore);\r\n\r\n    return (\r\n        <Menu fixed='top' inverted>\r\n            <Container>\r\n                <Menu.Item as={NavLink} exact to='/' header >\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\r\n                    dotReact\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/posts' name='Posts' />\r\n                    <Menu.Item position={\"right\"}>\r\n                        <Button as={NavLink} to='/createPost' positive content='Create Post'/>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu> \r\n    );\r\n};\r\n\r\n\r\nexport default observer(NavBar)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",["97","98","99","100"],"import { observer } from 'mobx-react-lite';\r\nimport React, {useContext, useEffect} from 'react'\r\nimport { Grid } from 'semantic-ui-react';\r\nimport ActivityDetails from '../details/ActivityDetails';\r\nimport ActivityForm from '../form/ActivityForm';\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n    \r\n    const activityStore = useContext(ActivityStore);\r\n    const {editMode, activity} = activityStore;\r\n\r\n    useEffect(() => {\r\n        activityStore.loadActivities();\r\n    }, [activityStore])\r\n\r\n    if (activityStore.loadingInitial) return <LoadingComponent content='Loading activities...' />\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityList />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n               <h2>Activity filters</h2>\r\n            </Grid.Column>\r\n        </Grid>    \r\n    );\r\n};     \r\n\r\nexport default observer(ActivityDashboard)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",["101","102"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport { Item, Button, Label, Segment } from 'semantic-ui-react';\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\nimport {makeAutoObservable} from 'mobx';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ActivityList: React.FC = () => {\r\n    \r\n    const activityStore = useContext(ActivityStore);\r\n    const {activitiesByDate, selectActivity, deleteActivity, submitting, target} = activityStore;\r\n    \r\n    return (\r\n        <Segment clearing>\r\n            <Item.Group divided>\r\n                {activitiesByDate.map(activity =>(\r\n                    <Item key={activity.id}>\r\n                        <Item.Content>\r\n                            <Item.Header as='a'>{activity.title}</Item.Header>\r\n                            <Item.Meta>{activity.date}</Item.Meta>\r\n                            <Item.Description>\r\n                                <div>{activity.description}</div>\r\n                                <div>{activity.city}, {activity.venue}</div>\r\n                            </Item.Description>\r\n                            <Item.Extra>\r\n                                <Button\r\n                                    as={Link} to={`/activities/${activity.id}`}\r\n                                    floated='right' \r\n                                    content='View' \r\n                                    color='blue' \r\n                                />\r\n                                <Button\r\n                                    name={activity.id}\r\n                                    loading={target === activity.id && submitting}\r\n                                    onClick={(e) => deleteActivity(e, activity.id)}\r\n                                    floated='right'\r\n                                    content='Delete'\r\n                                    color='red'\r\n                                />\r\n                                <Label basic content={activity.category} />\r\n                            </Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n                ))}\r\n                \r\n            </Item.Group>\r\n        </Segment>\r\n        \r\n    );\r\n};\r\n\r\nexport default observer(ActivityList)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",["103","104"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect } from 'react'\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Card, Image, Button } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\n\r\ninterface DetailsParams {\r\n    id: string;\r\n}\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<DetailsParams>> = ({match}) => {\r\n    \r\n    const activityStore = useContext(ActivityStore);\r\n    const {activity, openEditForm, cancelSelectedActivity, loadActivity, loadingInitial} = activityStore;\r\n    \r\n    useEffect(() => {\r\n        loadActivity(match.params.id)    \r\n    }, [loadActivity]\r\n    )\r\n    \r\n    if (loadingInitial || !activity) return <LoadingComponent content='Loading activity...' />\r\n    \r\n    return (\r\n        <Card fluid>\r\n            <Image src={`../assets/categoryImages/${activity!.category}.jpg`} wrapped ui={false} />\r\n            <Card.Content>\r\n                <Card.Header>{activity!.title}</Card.Header>\r\n                <Card.Meta>\r\n                    <span>{activity!.date}</span>\r\n                </Card.Meta>\r\n                <Card.Description>\r\n                    {activity!.description}\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Button.Group widths={2}>\r\n                    <Button onClick={() => openEditForm(activity!.id)} \r\n                            basic \r\n                            color='blue' \r\n                            content='Edit'/>\r\n                    <Button onClick={() => window.history.back} \r\n                            basic\r\n                            color='grey'\r\n                            content='Cancel'/>\r\n                </Button.Group>    \r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetails)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\store.ts",[],["105","106"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostList.tsx",["107","108","109","110","111","112","113","114","115"],"import { observer } from 'mobx-react-lite';\r\nimport React, {useContext, useEffect, useState} from 'react'\r\nimport {Item, Button, Label, Segment, Grid, Container, TextArea, Form, Pagination, Modal, Icon, Divider} from 'semantic-ui-react';\r\nimport PostStore from '../../app/stores/postStore'\r\nimport {makeAutoObservable} from 'mobx';\r\nimport { Link } from 'react-router-dom';\r\nimport PostWarning from './PostWarning';\r\n\r\nconst PostList: React.FC = () => {\r\n\r\n    const postStore = useContext(PostStore);\r\n    const {postsByDate, selectPost, deletePost, submitting, target} = postStore;\r\n\r\n    useEffect(() => {\r\n        postStore.loadPosts();\r\n    }, [postStore])\r\n    \r\n    if (postStore.postRegistry===undefined) \r\n        return (\r\n          <Segment textAlign={\"center\"}>\r\n              <p>\r\n              No posts created yet, click <Button color={\"green\"} >here</Button> to create' Title if no posts\r\n              </p>          \r\n          </Segment>  \r\n        );\r\n    \r\n    return (\r\n        <Segment clearing>\r\n            <Item.Group divided>\r\n                {postsByDate.map(post =>(\r\n                    <Item key={post.id}>\r\n                        <Item.Content>\r\n                            <Grid.Column floated='left' width={14}>\r\n                                <Item.Header as='a'>{post.title}</Item.Header>\r\n                                {/*<Container text content={post.body}></Container>*/}\r\n                                <Form>\r\n                                    <TextArea as={TextArea} rows={3} placeholder='Tell us more' value={post.body} />\r\n                                </Form>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated='right' width={2}>\r\n                                <Item.Meta>{post.lastUpdatedDate}</Item.Meta>\r\n                                <PostWarning />\r\n                                <Button \r\n                                    // onClick={() => selectPost(post.id)}\r\n                                    as={Link} to={`/posts/${post.id}`}\r\n                                    color='blue' content='View' floated={\"right\"}/>\r\n                            </Grid.Column>  \r\n                        </Item.Content>\r\n                    </Item>\r\n                ))}\r\n            </Item.Group>\r\n            <Container textAlign={\"center\"}>\r\n            <Divider/>   \r\n            <Pagination\r\n                boundaryRange={1}\r\n                defaultActivePage={1}\r\n                ellipsisItem={null}\r\n                firstItem={null}\r\n                lastItem={null}\r\n                siblingRange={1}\r\n                totalPages={10}\r\n            />\r\n            </Container>\r\n        </Segment>\r\n        \r\n    );\r\n    \r\n    \r\n}\r\n\r\nexport default observer(PostList)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\postStore.ts",["116","117","118"],"import {action, computed, makeAutoObservable, observable, runInAction} from \"mobx\";\r\nimport {createContext, SyntheticEvent, useEffect} from 'react';\r\nimport { IPost } from '../models/post';\r\nimport agent from \"../api/agent\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport {IActivity} from \"../models/activity\";\r\n\r\n\r\nexport class PostStore {\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n    \r\n    @observable postRegistry = new Map();\r\n    @observable posts: IPost[] = [];\r\n    @observable post: IPost | undefined = undefined;\r\n    @observable loadingInitial = false;\r\n    @observable editMode = false;\r\n    @observable submitting = false;\r\n    @observable target = '';\r\n\r\n    @computed get postsByDate() {\r\n        return Array.from(this.postRegistry.values()).slice().sort(\r\n               (a,b) => Date.parse(a.date) - Date.parse(b.date))\r\n    }\r\n    \r\n    @action selectPost = (id: string) => {\r\n        this.post = this.postRegistry.get(id);\r\n        this.editMode = false;\r\n    };\r\n    \r\n    @action loadPosts = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const posts = await agent.Posts.list();\r\n            runInAction(() => {\r\n                posts.forEach(post => {\r\n                    post.createdDate = post.createdDate.split('T')[0];\r\n                    post.lastUpdatedDate = post.lastUpdatedDate.split('T')[0];\r\n                    this.postRegistry.set(post.id, post);\r\n                });\r\n                this.loadingInitial = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingInitial = false;\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n    @action loadPost = async (id: string) => {\r\n        let post = this.getPost(id);\r\n        if (post) {\r\n            this.post = post;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                post = await agent.Posts.details(id);\r\n                runInAction(() => {\r\n                    this.post = post;\r\n                    this.loadingInitial = false;\r\n                })\r\n            } catch (error) {\r\n                runInAction(() => {\r\n                    this.loadingInitial = false;\r\n                })\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n   \r\n    getPost = (id: string) => {\r\n        return this.postRegistry.get(id);\r\n    }\r\n\r\n    @action setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    @action createPost = async (post: IPost) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.Posts.create(post);\r\n            runInAction( () => {\r\n                this.postRegistry.set(post.id, post);\r\n                this.editMode = false;\r\n                this.submitting = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction( () => {\r\n                this.submitting = false;\r\n            })\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    @action editPost = async (post: IPost) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.Posts.update(post);\r\n            runInAction(() => {\r\n                this.postRegistry.set(post.id, post);\r\n                this.post = post;\r\n                this.editMode = false;\r\n                this.submitting = false;\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n            });\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    @action deletePost = async  (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\r\n        this.submitting = true;\r\n        this.target = event.currentTarget.name;\r\n        try {\r\n            await  agent.Posts.delete(id);\r\n            runInAction(() => {\r\n                this.postRegistry.delete(id);\r\n                this.submitting = false;\r\n                this.target = '';\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n                this.target = '';\r\n            });\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n    \r\n    @action cancelFormOpen = () => {\r\n        this.editMode = false;\r\n    }\r\n\r\n    @action openEditForm  = (id: string) => {\r\n        this.post = this.postRegistry.get(id);\r\n        this.editMode = true;\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default createContext(new PostStore());","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostForm.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostWarning.tsx",["119","120","121","122","123","124","125","126","127","128","129","130","131"],"import { observer } from 'mobx-react-lite';\r\nimport React, {useContext, useEffect, useState} from 'react'\r\nimport {\r\n    Item,\r\n    Button,\r\n    Label,\r\n    Segment,\r\n    Grid,\r\n    Container,\r\n    TextArea,\r\n    Form,\r\n    Message,\r\n    Divider,\r\n    Modal, Icon\r\n} from 'semantic-ui-react';\r\nimport PostStore from '../../app/stores/postStore'\r\nimport {makeAutoObservable} from 'mobx';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PostWarning: React.FC = () => {\r\n\r\n    const postStore = useContext(PostStore);\r\n    const {openEditForm} = postStore;\r\n    \r\n    const [open, setOpen] = useState(false);\r\n    \r\n    return(\r\n        <Modal\r\n            basic\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            open={open}\r\n            size='small'\r\n            trigger={<Button color='red' content='Delete' floated='left'/>}\r\n        >\r\n            <Modal.Content style={{textAlign: 'center'}}>\r\n                <h2>Warning</h2>\r\n                <p>\r\n                    Are you sure you would like to delete?\r\n                </p>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button basic color='green' inverted onClick={() => {setOpen(false); }}>\r\n                    <Icon name='remove' /> No\r\n                </Button>\r\n                <Button color='red' inverted onClick={(e) => {setOpen(false); /* deletePost(e, post.id); */} }>\r\n                    <Icon name='checkmark' /> Yes\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default observer(PostWarning)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\postDashboard\\PostDashboard.tsx",[],{"ruleId":"132","severity":1,"message":"133","line":7,"column":10,"nodeType":"134","messageId":"135","endLine":7,"endColumn":15},{"ruleId":"132","severity":1,"message":"136","line":7,"column":17,"nodeType":"134","messageId":"135","endLine":7,"endColumn":29},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"132","severity":1,"message":"141","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":26},{"ruleId":"132","severity":1,"message":"142","line":1,"column":38,"nodeType":"134","messageId":"135","endLine":1,"endColumn":48},{"ruleId":"132","severity":1,"message":"143","line":6,"column":8,"nodeType":"134","messageId":"135","endLine":6,"endColumn":24},{"ruleId":"132","severity":1,"message":"144","line":7,"column":8,"nodeType":"134","messageId":"135","endLine":7,"endColumn":21},{"ruleId":"132","severity":1,"message":"145","line":13,"column":8,"nodeType":"134","messageId":"135","endLine":13,"endColumn":16},{"ruleId":"146","severity":1,"message":"147","line":36,"column":1,"nodeType":"148","endLine":39,"endColumn":2},{"ruleId":"132","severity":1,"message":"149","line":6,"column":10,"nodeType":"134","messageId":"135","endLine":6,"endColumn":18},{"ruleId":"132","severity":1,"message":"150","line":11,"column":11,"nodeType":"134","messageId":"135","endLine":11,"endColumn":24},{"ruleId":"132","severity":1,"message":"151","line":4,"column":8,"nodeType":"134","messageId":"135","endLine":4,"endColumn":23},{"ruleId":"132","severity":1,"message":"152","line":5,"column":8,"nodeType":"134","messageId":"135","endLine":5,"endColumn":20},{"ruleId":"132","severity":1,"message":"153","line":13,"column":12,"nodeType":"134","messageId":"135","endLine":13,"endColumn":20},{"ruleId":"132","severity":1,"message":"154","line":13,"column":22,"nodeType":"134","messageId":"135","endLine":13,"endColumn":30},{"ruleId":"132","severity":1,"message":"155","line":5,"column":9,"nodeType":"134","messageId":"135","endLine":5,"endColumn":27},{"ruleId":"132","severity":1,"message":"156","line":11,"column":30,"nodeType":"134","messageId":"135","endLine":11,"endColumn":44},{"ruleId":"132","severity":1,"message":"157","line":15,"column":36,"nodeType":"134","messageId":"135","endLine":15,"endColumn":58},{"ruleId":"158","severity":1,"message":"159","line":19,"column":8,"nodeType":"160","endLine":19,"endColumn":22,"suggestions":"161"},{"ruleId":"137","replacedBy":"162"},{"ruleId":"139","replacedBy":"163"},{"ruleId":"132","severity":1,"message":"164","line":2,"column":39,"nodeType":"134","messageId":"135","endLine":2,"endColumn":47},{"ruleId":"132","severity":1,"message":"165","line":3,"column":23,"nodeType":"134","messageId":"135","endLine":3,"endColumn":28},{"ruleId":"132","severity":1,"message":"166","line":3,"column":84,"nodeType":"134","messageId":"135","endLine":3,"endColumn":89},{"ruleId":"132","severity":1,"message":"167","line":3,"column":91,"nodeType":"134","messageId":"135","endLine":3,"endColumn":95},{"ruleId":"132","severity":1,"message":"155","line":5,"column":9,"nodeType":"134","messageId":"135","endLine":5,"endColumn":27},{"ruleId":"132","severity":1,"message":"168","line":12,"column":25,"nodeType":"134","messageId":"135","endLine":12,"endColumn":35},{"ruleId":"132","severity":1,"message":"169","line":12,"column":37,"nodeType":"134","messageId":"135","endLine":12,"endColumn":47},{"ruleId":"132","severity":1,"message":"170","line":12,"column":49,"nodeType":"134","messageId":"135","endLine":12,"endColumn":59},{"ruleId":"132","severity":1,"message":"171","line":12,"column":61,"nodeType":"134","messageId":"135","endLine":12,"endColumn":67},{"ruleId":"132","severity":1,"message":"141","line":2,"column":24,"nodeType":"134","messageId":"135","endLine":2,"endColumn":33},{"ruleId":"132","severity":1,"message":"172","line":5,"column":10,"nodeType":"134","messageId":"135","endLine":5,"endColumn":18},{"ruleId":"132","severity":1,"message":"173","line":6,"column":9,"nodeType":"134","messageId":"135","endLine":6,"endColumn":18},{"ruleId":"132","severity":1,"message":"141","line":2,"column":28,"nodeType":"134","messageId":"135","endLine":2,"endColumn":37},{"ruleId":"132","severity":1,"message":"174","line":4,"column":5,"nodeType":"134","messageId":"135","endLine":4,"endColumn":9},{"ruleId":"132","severity":1,"message":"165","line":6,"column":5,"nodeType":"134","messageId":"135","endLine":6,"endColumn":10},{"ruleId":"132","severity":1,"message":"175","line":7,"column":5,"nodeType":"134","messageId":"135","endLine":7,"endColumn":12},{"ruleId":"132","severity":1,"message":"176","line":8,"column":5,"nodeType":"134","messageId":"135","endLine":8,"endColumn":9},{"ruleId":"132","severity":1,"message":"177","line":9,"column":5,"nodeType":"134","messageId":"135","endLine":9,"endColumn":14},{"ruleId":"132","severity":1,"message":"178","line":10,"column":5,"nodeType":"134","messageId":"135","endLine":10,"endColumn":13},{"ruleId":"132","severity":1,"message":"179","line":11,"column":5,"nodeType":"134","messageId":"135","endLine":11,"endColumn":9},{"ruleId":"132","severity":1,"message":"180","line":12,"column":5,"nodeType":"134","messageId":"135","endLine":12,"endColumn":12},{"ruleId":"132","severity":1,"message":"181","line":13,"column":5,"nodeType":"134","messageId":"135","endLine":13,"endColumn":12},{"ruleId":"132","severity":1,"message":"155","line":17,"column":9,"nodeType":"134","messageId":"135","endLine":17,"endColumn":27},{"ruleId":"132","severity":1,"message":"182","line":18,"column":10,"nodeType":"134","messageId":"135","endLine":18,"endColumn":14},{"ruleId":"132","severity":1,"message":"183","line":23,"column":12,"nodeType":"134","messageId":"135","endLine":23,"endColumn":24},"@typescript-eslint/no-unused-vars","'store' is defined but never used.","Identifier","unusedVar","'StoreContext' is defined but never used.","no-native-reassign",["184"],"no-negated-in-lhs",["185"],"'useEffect' is defined but never used.","'useContext' is defined but never used.","'LoadingComponent' is defined but never used.","'ActivityStore' is defined but never used.","'PostList' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useStore' is defined but never used.","'activityStore' is assigned a value but never used.","'ActivityDetails' is defined but never used.","'ActivityForm' is defined but never used.","'editMode' is assigned a value but never used.","'activity' is assigned a value but never used.","'makeAutoObservable' is defined but never used.","'selectActivity' is assigned a value but never used.","'cancelSelectedActivity' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["186"],["184"],["185"],"'useState' is defined but never used.","'Label' is defined but never used.","'Modal' is defined but never used.","'Icon' is defined but never used.","'selectPost' is assigned a value but never used.","'deletePost' is assigned a value but never used.","'submitting' is assigned a value but never used.","'target' is assigned a value but never used.","'observer' is defined but never used.","'IActivity' is defined but never used.","'Item' is defined but never used.","'Segment' is defined but never used.","'Grid' is defined but never used.","'Container' is defined but never used.","'TextArea' is defined but never used.","'Form' is defined but never used.","'Message' is defined but never used.","'Divider' is defined but never used.","'Link' is defined but never used.","'openEditForm' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"187","fix":"188"},"Update the dependencies array to be: [loadActivity, match.params.id]",{"range":"189","text":"190"},[729,743],"[loadActivity, match.params.id]"]