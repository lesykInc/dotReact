[{"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\index.tsx":"1","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\api\\agent.ts":"4","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\nav\\NavBar.tsx":"5","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"6","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"7","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"8","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"9","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"10","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\activityStore.ts":"11"},{"size":540,"mtime":1612884386522,"results":"12","hashOfConfig":"13"},{"size":440,"mtime":1612884386522,"results":"14","hashOfConfig":"13"},{"size":3331,"mtime":1613058736886,"results":"15","hashOfConfig":"13"},{"size":1178,"mtime":1613028809816,"results":"16","hashOfConfig":"13"},{"size":750,"mtime":1612946736098,"results":"17","hashOfConfig":"13"},{"size":2417,"mtime":1613058501908,"results":"18","hashOfConfig":"13"},{"size":2363,"mtime":1613058633605,"results":"19","hashOfConfig":"13"},{"size":1468,"mtime":1612967375783,"results":"20","hashOfConfig":"13"},{"size":3488,"mtime":1613032444193,"results":"21","hashOfConfig":"13"},{"size":401,"mtime":1613030271340,"results":"22","hashOfConfig":"13"},{"size":749,"mtime":1613058808462,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"wm7pc1",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\index.tsx",[],["51","52"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\App.tsx",["53","54","55","56","57"],"import React, {useState, useEffect, Fragment, SyntheticEvent, useContext} from 'react';\r\nimport {Container, Header, Icon, List } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { IActivity } from '../models/activity';\r\nimport NavBar from '../../features/nav/NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport agent from '../api/agent';\r\nimport LoadingComponent from \"./LoadingComponent\";\r\nimport {observer} from 'mobx-react-lite'\r\nimport ActivityStore from '../stores/activityStore';\r\n\r\nconst App = () => {\r\n    const activityStore = useContext(ActivityStore);\r\n    const [activities, setActivities] = useState<IActivity[]>([]);\r\n    const [selectedActivity, setSelectedActivity] = useState<IActivity | null>(null);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [submitting, setSubmitting] = useState(false);\r\n    const [target, setTarget]= useState('');\r\n    \r\n    const handleSelectActivity = (id: string) => {\r\n        setSelectedActivity(activities.filter(a => a.id === id)[0]);\r\n        setEditMode(false);\r\n    }\r\n    \r\n    const handleOpenCreateForm = () => {\r\n        setSelectedActivity(null);\r\n        setEditMode(true);\r\n    }\r\n\r\n    const handleCreateActivity = (activity: IActivity) => {\r\n        setSubmitting(true);\r\n        agent.Activities.create(activity).then(() => {\r\n            setActivities([...activities, activity])\r\n            setSelectedActivity(activity);\r\n            setEditMode(false)   \r\n        }).then(() => setSubmitting(false))\r\n    }\r\n    \r\n    const handleEditActivity = (activity: IActivity) => {\r\n        setSubmitting(true);\r\n        agent.Activities.update(activity).then(() => {\r\n            setActivities([...activities.filter(a => a.id !== activity.id)])\r\n            setSelectedActivity(activity)\r\n            setEditMode(false)\r\n        }).then(() => setSubmitting(false))\r\n    }\r\n    \r\n    const handleDeleteActivity = (event: SyntheticEvent<HTMLButtonElement>,id: string) => {\r\n        setSubmitting(true);\r\n        setTarget(event.currentTarget.name)\r\n        agent.Activities.delete(id).then(() => {\r\n            setActivities([...activities.filter(a => a.id !== id)]) \r\n        }).then(() => setSubmitting(false))\r\n    }\r\n    \r\n    useEffect(() => {\r\n        activityStore.loadActivities();\r\n    }, [activityStore])\r\n  \r\n    if (activityStore.loadingInitial) return <LoadingComponent content='Loading activities...' />\r\n\r\n  return (\r\n    <Fragment>\r\n        <NavBar openCreateForm={handleOpenCreateForm}/>\r\n        <Container style={{marginTop: '7em'}}>\r\n            <ActivityDashboard \r\n                activities={activityStore.activities}\r\n                selectActivity={handleSelectActivity}\r\n                selectedActivity={selectedActivity!}\r\n                editMode={editMode}\r\n                setEditMode={setEditMode}\r\n                setSelectedActivity={setSelectedActivity}\r\n                createActivity={handleCreateActivity}\r\n                editActivity={handleEditActivity}\r\n                deleteActivity={handleDeleteActivity}\r\n                submitting={submitting}\r\n                target={target}\r\n            />\r\n        </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(App);\r\n","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\api\\agent.ts",["58"],"import axios, {AxiosResponse }from 'axios';\r\nimport { IActivity } from '../models/activity';\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api';\r\n\r\nconst responseBody = (responce: AxiosResponse) => responce.data;\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) => \r\n    new Promise<AxiosResponse>(resolve => setTimeout(()=> resolve(response), ms))\r\n\r\n\r\nconst requests = {\r\n    get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(1000)).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(1000)).then(responseBody),\r\n    del: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (): Promise<IActivity[]> => requests.get('/activities'),\r\n    details: (id: string) => requests.get(`/activities/${id}`),\r\n    create: (activity: IActivity) => requests.post(`/activities`, activity),\r\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del(`/activities/${id}`)\r\n}\r\n\r\nexport default {\r\n    Activities\r\n}","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\nav\\NavBar.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",["59","60"],"import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react'\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport ActivityDetails from '../details/ActivityDetails';\r\nimport ActivityForm from '../form/ActivityForm';\r\nimport ActivityList from \"./ActivityList\";\r\n\r\ninterface IProps {\r\n    activities: IActivity[];\r\n    selectActivity: (id: string) => void;\r\n    selectedActivity: IActivity | null;\r\n    editMode: boolean;\r\n    setEditMode: (editMode: boolean) => void;\r\n    setSelectedActivity: (activity: IActivity | null) => void;\r\n    createActivity: (activity: IActivity) => void;\r\n    editActivity: (activity: IActivity) => void;\r\n    deleteActivity: (event: SyntheticEvent<HTMLButtonElement>, id: string) => void;\r\n    submitting: boolean;\r\n    target: string;\r\n}\r\n\r\nconst ActivityDashboard: React.FC<IProps> = (\r\n    {   activities, \r\n        selectActivity, \r\n        selectedActivity,\r\n        editMode,\r\n        setEditMode,\r\n        setSelectedActivity,\r\n        createActivity,\r\n        editActivity,\r\n        deleteActivity,\r\n        submitting,\r\n        target\r\n    }) => {\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityList \r\n                    activities={activities} \r\n                    selectActivity={selectActivity}\r\n                    deleteActivity={deleteActivity}\r\n                    submitting={submitting}\r\n                    target={target}\r\n                />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                {selectedActivity && !editMode && (\r\n                    <ActivityDetails activity={selectedActivity} \r\n                                     setEditMode={setEditMode}\r\n                                     setSelectedActivity={setSelectedActivity}\r\n                    />\r\n                    )}\r\n                {editMode && \r\n                <ActivityForm \r\n                    key={selectedActivity && selectedActivity.id || 0}\r\n                    setEditMode={setEditMode} \r\n                    activity={selectedActivity!}\r\n                    createActivity={createActivity}\r\n                    editActivity={editActivity}\r\n                    submitting={submitting}\r\n                /> }\r\n            </Grid.Column>\r\n        </Grid>    \r\n    );\r\n};\r\n\r\nexport default observer(ActivityDashboard)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",[],["61","62"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\activityStore.ts",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":2,"column":20,"nodeType":"69","messageId":"70","endLine":2,"endColumn":26},{"ruleId":"67","severity":1,"message":"71","line":2,"column":28,"nodeType":"69","messageId":"70","endLine":2,"endColumn":32},{"ruleId":"67","severity":1,"message":"72","line":2,"column":34,"nodeType":"69","messageId":"70","endLine":2,"endColumn":38},{"ruleId":"67","severity":1,"message":"73","line":17,"column":12,"nodeType":"69","messageId":"70","endLine":17,"endColumn":19},{"ruleId":"67","severity":1,"message":"74","line":17,"column":21,"nodeType":"69","messageId":"70","endLine":17,"endColumn":31},{"ruleId":"75","severity":1,"message":"76","line":27,"column":1,"nodeType":"77","endLine":29,"endColumn":2},{"ruleId":"78","severity":1,"message":"79","line":57,"column":43,"nodeType":"80","messageId":"81","endLine":57,"endColumn":45},{"ruleId":"78","severity":1,"message":"79","line":57,"column":66,"nodeType":"80","messageId":"81","endLine":57,"endColumn":68},{"ruleId":"63","replacedBy":"82"},{"ruleId":"65","replacedBy":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"@typescript-eslint/no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Icon' is defined but never used.","'List' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator",["84"],["85"],"no-global-assign","no-unsafe-negation"]