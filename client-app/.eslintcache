[{"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\index.tsx":"1","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\api\\agent.ts":"4","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"5","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\activityStore.ts":"6","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\nav\\NavBar.tsx":"7","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"8","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"9","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"10","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"11","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\store.ts":"12","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\home\\HomePage.tsx":"13","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostList.tsx":"14","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\postStore.ts":"15","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostForm.tsx":"16","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostWarning.tsx":"17","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\postDashboard\\PostDashboard.tsx":"18","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\ScrollToTop.tsx":"19","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx":"20","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx":"21","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx":"22","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx":"23","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx":"24","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\NotFound.tsx":"25"},{"size":782,"mtime":1614001390098,"results":"26","hashOfConfig":"27"},{"size":440,"mtime":1612884386522,"results":"28","hashOfConfig":"27"},{"size":2176,"mtime":1614092824162,"results":"29","hashOfConfig":"27"},{"size":1653,"mtime":1614091928089,"results":"30","hashOfConfig":"27"},{"size":401,"mtime":1613030271340,"results":"31","hashOfConfig":"27"},{"size":4543,"mtime":1614005757151,"results":"32","hashOfConfig":"27"},{"size":1153,"mtime":1614002864912,"results":"33","hashOfConfig":"27"},{"size":942,"mtime":1614002685584,"results":"34","hashOfConfig":"27"},{"size":1203,"mtime":1614007899638,"results":"35","hashOfConfig":"27"},{"size":4299,"mtime":1614010032070,"results":"36","hashOfConfig":"27"},{"size":1489,"mtime":1614009835381,"results":"37","hashOfConfig":"27"},{"size":357,"mtime":1613379190231,"results":"38","hashOfConfig":"27"},{"size":943,"mtime":1614010232698,"results":"39","hashOfConfig":"27"},{"size":2767,"mtime":1613983038317,"results":"40","hashOfConfig":"27"},{"size":4427,"mtime":1613752735460,"results":"41","hashOfConfig":"27"},{"size":2987,"mtime":1613981968338,"results":"42","hashOfConfig":"27"},{"size":1595,"mtime":1613981618616,"results":"43","hashOfConfig":"27"},{"size":379,"mtime":1613980275844,"results":"44","hashOfConfig":"27"},{"size":268,"mtime":1614001048820,"results":"45","hashOfConfig":"27"},{"size":1469,"mtime":1614004440674,"results":"46","hashOfConfig":"27"},{"size":2012,"mtime":1614009236719,"results":"47","hashOfConfig":"27"},{"size":1622,"mtime":1614009462715,"results":"48","hashOfConfig":"27"},{"size":2424,"mtime":1614009282261,"results":"49","hashOfConfig":"27"},{"size":2445,"mtime":1614009462781,"results":"50","hashOfConfig":"27"},{"size":627,"mtime":1614092240712,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"wm7pc1",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"55"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"55"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"55"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"55"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"55"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\index.tsx",["111","112"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './app/layout/styles.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nReactDOM.render(\r\n      <BrowserRouter>\r\n          <ScrollToTop />\r\n          <App />\r\n      </BrowserRouter>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["113","114"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\App.tsx",["115"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\api\\agent.ts",["116"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\activityStore.ts",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\nav\\NavBar.tsx",["117","118"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {Container, Menu, Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst NavBar: React.FC = () => {\r\n\r\n    return (\r\n        <Menu fixed='top' inverted>\r\n            <Container>\r\n                <Menu.Item as={NavLink} exact to='/' header >\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\r\n                    dotReact\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/posts' name='Posts' />\r\n                    <Menu.Item position={\"right\"}>\r\n                        <Button as={NavLink} to='/createPost' positive content='Create Post'/>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu> \r\n    );\r\n};\r\n\r\n\r\nexport default observer(NavBar)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",["119"],"import { observer } from 'mobx-react-lite';\r\nimport React, {Fragment, useContext } from 'react'\r\nimport { Item, Label, Segment } from 'semantic-ui-react';\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\nimport {makeAutoObservable} from 'mobx';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nconst ActivityList: React.FC = () => {\r\n    \r\n    const activityStore = useContext(ActivityStore);\r\n    const {activitiesByDate} = activityStore;\r\n    \r\n    return (\r\n        <Fragment>\r\n            {activitiesByDate.map(([group, activities]) =>(\r\n                <Fragment key={group}>\r\n                    <Label size='large' color='blue'>\r\n                        {group}\r\n                    </Label>\r\n                    <Segment clearing>\r\n                        <Item.Group divided>\r\n                            {activities.map(activity =>(\r\n                                <ActivityListItem key   ={activity.id} activity={activity}/>\r\n                            ))}\r\n                        </Item.Group>\r\n                    </Segment>  \r\n                </Fragment>\r\n            ))}\r\n        </Fragment>\r\n        \r\n        \r\n    );\r\n};\r\n\r\nexport default observer(ActivityList)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",["120"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect } from 'react'\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\ninterface DetailsParams {\r\n    id: string;\r\n}\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<DetailsParams>> = ({match}) => {\r\n    \r\n    const activityStore = useContext(ActivityStore);\r\n    const {activity, loadActivity, loadingInitial} = activityStore;\r\n    \r\n    useEffect(() => {\r\n        loadActivity(match.params.id)    \r\n    }, [loadActivity]\r\n    )\r\n    \r\n    if (loadingInitial || !activity) return <LoadingComponent content='Loading activity...' />\r\n    \r\n    return (\r\n       <Grid>\r\n           <Grid.Column width={10}>\r\n               <ActivityDetailedHeader activity={activity}/>\r\n               <ActivityDetailedInfo activity={activity}/>\r\n               <ActivityDetailedChat />\r\n           </Grid.Column>\r\n           <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar />\r\n           </Grid.Column>\r\n       </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetails)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\store.ts",[],["121","122"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostList.tsx",["123","124","125","126","127","128","129","130","131"],"import { observer } from 'mobx-react-lite';\r\nimport React, {useContext, useEffect, useState} from 'react'\r\nimport {Item, Button, Label, Segment, Grid, Container, TextArea, Form, Pagination, Modal, Icon, Divider} from 'semantic-ui-react';\r\nimport PostStore from '../../app/stores/postStore'\r\nimport {makeAutoObservable} from 'mobx';\r\nimport { Link } from 'react-router-dom';\r\nimport PostWarning from './PostWarning';\r\n\r\nconst PostList: React.FC = () => {\r\n\r\n    const postStore = useContext(PostStore);\r\n    const {postsByDate, selectPost, deletePost, submitting, target} = postStore;\r\n\r\n    useEffect(() => {\r\n        postStore.loadPosts();\r\n    }, [postStore])\r\n    \r\n    if (postStore.postRegistry===undefined) \r\n        return (\r\n          <Segment textAlign={\"center\"}>\r\n              <p>\r\n              No posts created yet, click <Button color={\"green\"} >here</Button> to create' Title if no posts\r\n              </p>          \r\n          </Segment>  \r\n        );\r\n    \r\n    return (\r\n        <Segment clearing>\r\n            <Item.Group divided>\r\n                {postsByDate.map(post =>(\r\n                    <Item key={post.id}>\r\n                        <Item.Content>\r\n                            <Grid.Column floated='left' width={14}>\r\n                                <Item.Header as='a'>{post.title}</Item.Header>\r\n                                {/*<Container text content={post.body}></Container>*/}\r\n                                <Form>\r\n                                    <TextArea as={TextArea} rows={3} placeholder='Tell us more' value={post.body} />\r\n                                </Form>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated='right' width={2}>\r\n                                <Item.Meta>{post.lastUpdatedDate}</Item.Meta>\r\n                                <PostWarning />\r\n                                <Button \r\n                                    // onClick={() => selectPost(post.id)}\r\n                                    as={Link} to={`/posts/${post.id}`}\r\n                                    color='blue' content='View' floated={\"right\"}/>\r\n                            </Grid.Column>  \r\n                        </Item.Content>\r\n                    </Item>\r\n                ))}\r\n            </Item.Group>\r\n            <Container textAlign={\"center\"}>\r\n            <Divider/>   \r\n            <Pagination\r\n                boundaryRange={1}\r\n                defaultActivePage={1}\r\n                ellipsisItem={null}\r\n                firstItem={null}\r\n                lastItem={null}\r\n                siblingRange={1}\r\n                totalPages={10}\r\n            />\r\n            </Container>\r\n        </Segment>\r\n        \r\n    );\r\n    \r\n    \r\n}\r\n\r\nexport default observer(PostList)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\postStore.ts",["132","133","134"],"import {action, computed, makeAutoObservable, observable, runInAction} from \"mobx\";\r\nimport {createContext, SyntheticEvent, useEffect} from 'react';\r\nimport { IPost } from '../models/post';\r\nimport agent from \"../api/agent\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport {IActivity} from \"../models/activity\";\r\n\r\n\r\nexport class PostStore {\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n    \r\n    @observable postRegistry = new Map();\r\n    @observable posts: IPost[] = [];\r\n    @observable post: IPost | undefined = undefined;\r\n    @observable loadingInitial = false;\r\n    @observable editMode = false;\r\n    @observable submitting = false;\r\n    @observable target = '';\r\n\r\n    @computed get postsByDate() {\r\n        return Array.from(this.postRegistry.values()).slice().sort(\r\n               (a,b) => Date.parse(a.date) - Date.parse(b.date))\r\n    }\r\n    \r\n    @action selectPost = (id: string) => {\r\n        this.post = this.postRegistry.get(id);\r\n        this.editMode = false;\r\n    };\r\n    \r\n    @action loadPosts = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const posts = await agent.Posts.list();\r\n            runInAction(() => {\r\n                posts.forEach(post => {\r\n                    post.createdDate = post.createdDate.split('T')[0];\r\n                    post.lastUpdatedDate = post.lastUpdatedDate.split('T')[0];\r\n                    this.postRegistry.set(post.id, post);\r\n                });\r\n                this.loadingInitial = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingInitial = false;\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n    @action loadPost = async (id: string) => {\r\n        let post = this.getPost(id);\r\n        if (post) {\r\n            this.post = post;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                post = await agent.Posts.details(id);\r\n                runInAction(() => {\r\n                    this.post = post;\r\n                    this.loadingInitial = false;\r\n                })\r\n            } catch (error) {\r\n                runInAction(() => {\r\n                    this.loadingInitial = false;\r\n                })\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n   \r\n    getPost = (id: string) => {\r\n        return this.postRegistry.get(id);\r\n    }\r\n\r\n    @action setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    @action createPost = async (post: IPost) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.Posts.create(post);\r\n            runInAction( () => {\r\n                this.postRegistry.set(post.id, post);\r\n                this.editMode = false;\r\n                this.submitting = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction( () => {\r\n                this.submitting = false;\r\n            })\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    @action editPost = async (post: IPost) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.Posts.update(post);\r\n            runInAction(() => {\r\n                this.postRegistry.set(post.id, post);\r\n                this.post = post;\r\n                this.editMode = false;\r\n                this.submitting = false;\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n            });\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    @action deletePost = async  (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\r\n        this.submitting = true;\r\n        this.target = event.currentTarget.name;\r\n        try {\r\n            await  agent.Posts.delete(id);\r\n            runInAction(() => {\r\n                this.postRegistry.delete(id);\r\n                this.submitting = false;\r\n                this.target = '';\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n                this.target = '';\r\n            });\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n    \r\n    @action cancelFormOpen = () => {\r\n        this.editMode = false;\r\n    }\r\n\r\n    @action openEditForm  = (id: string) => {\r\n        this.post = this.postRegistry.get(id);\r\n        this.editMode = true;\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default createContext(new PostStore());","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostForm.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\PostWarning.tsx",["135","136","137","138","139","140","141","142","143","144","145","146","147"],"import { observer } from 'mobx-react-lite';\r\nimport React, {useContext, useEffect, useState} from 'react'\r\nimport {\r\n    Item,\r\n    Button,\r\n    Label,\r\n    Segment,\r\n    Grid,\r\n    Container,\r\n    TextArea,\r\n    Form,\r\n    Message,\r\n    Divider,\r\n    Modal, Icon\r\n} from 'semantic-ui-react';\r\nimport PostStore from '../../app/stores/postStore'\r\nimport {makeAutoObservable} from 'mobx';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PostWarning: React.FC = () => {\r\n\r\n    const postStore = useContext(PostStore);\r\n    const {openEditForm} = postStore;\r\n    \r\n    const [open, setOpen] = useState(false);\r\n    \r\n    return(\r\n        <Modal\r\n            basic\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            open={open}\r\n            size='small'\r\n            trigger={<Button color='red' content='Delete' floated='left'/>}\r\n        >\r\n            <Modal.Content style={{textAlign: 'center'}}>\r\n                <h2>Warning</h2>\r\n                <p>\r\n                    Are you sure you would like to delete?\r\n                </p>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button basic color='green' inverted onClick={() => {setOpen(false); }}>\r\n                    <Icon name='remove' /> No\r\n                </Button>\r\n                <Button color='red' inverted onClick={(e) => {setOpen(false); /* deletePost(e, post.id); */} }>\r\n                    <Icon name='checkmark' /> Yes\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default observer(PostWarning)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\posts\\postDashboard\\PostDashboard.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\ScrollToTop.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\NotFound.tsx",[],{"ruleId":"148","severity":1,"message":"149","line":7,"column":10,"nodeType":"150","messageId":"151","endLine":7,"endColumn":15},{"ruleId":"148","severity":1,"message":"152","line":7,"column":17,"nodeType":"150","messageId":"151","endLine":7,"endColumn":29},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"148","severity":1,"message":"157","line":11,"column":8,"nodeType":"150","messageId":"151","endLine":11,"endColumn":16},{"ruleId":"158","severity":1,"message":"159","line":40,"column":1,"nodeType":"160","endLine":43,"endColumn":2},{"ruleId":"148","severity":1,"message":"161","line":2,"column":17,"nodeType":"150","messageId":"151","endLine":2,"endColumn":27},{"ruleId":"148","severity":1,"message":"162","line":5,"column":10,"nodeType":"150","messageId":"151","endLine":5,"endColumn":18},{"ruleId":"148","severity":1,"message":"163","line":5,"column":9,"nodeType":"150","messageId":"151","endLine":5,"endColumn":27},{"ruleId":"164","severity":1,"message":"165","line":23,"column":8,"nodeType":"166","endLine":23,"endColumn":22,"suggestions":"167"},{"ruleId":"153","replacedBy":"168"},{"ruleId":"155","replacedBy":"169"},{"ruleId":"148","severity":1,"message":"170","line":2,"column":39,"nodeType":"150","messageId":"151","endLine":2,"endColumn":47},{"ruleId":"148","severity":1,"message":"171","line":3,"column":23,"nodeType":"150","messageId":"151","endLine":3,"endColumn":28},{"ruleId":"148","severity":1,"message":"172","line":3,"column":84,"nodeType":"150","messageId":"151","endLine":3,"endColumn":89},{"ruleId":"148","severity":1,"message":"173","line":3,"column":91,"nodeType":"150","messageId":"151","endLine":3,"endColumn":95},{"ruleId":"148","severity":1,"message":"163","line":5,"column":9,"nodeType":"150","messageId":"151","endLine":5,"endColumn":27},{"ruleId":"148","severity":1,"message":"174","line":12,"column":25,"nodeType":"150","messageId":"151","endLine":12,"endColumn":35},{"ruleId":"148","severity":1,"message":"175","line":12,"column":37,"nodeType":"150","messageId":"151","endLine":12,"endColumn":47},{"ruleId":"148","severity":1,"message":"176","line":12,"column":49,"nodeType":"150","messageId":"151","endLine":12,"endColumn":59},{"ruleId":"148","severity":1,"message":"177","line":12,"column":61,"nodeType":"150","messageId":"151","endLine":12,"endColumn":67},{"ruleId":"148","severity":1,"message":"178","line":2,"column":24,"nodeType":"150","messageId":"151","endLine":2,"endColumn":33},{"ruleId":"148","severity":1,"message":"179","line":5,"column":10,"nodeType":"150","messageId":"151","endLine":5,"endColumn":18},{"ruleId":"148","severity":1,"message":"180","line":6,"column":9,"nodeType":"150","messageId":"151","endLine":6,"endColumn":18},{"ruleId":"148","severity":1,"message":"178","line":2,"column":28,"nodeType":"150","messageId":"151","endLine":2,"endColumn":37},{"ruleId":"148","severity":1,"message":"181","line":4,"column":5,"nodeType":"150","messageId":"151","endLine":4,"endColumn":9},{"ruleId":"148","severity":1,"message":"171","line":6,"column":5,"nodeType":"150","messageId":"151","endLine":6,"endColumn":10},{"ruleId":"148","severity":1,"message":"182","line":7,"column":5,"nodeType":"150","messageId":"151","endLine":7,"endColumn":12},{"ruleId":"148","severity":1,"message":"183","line":8,"column":5,"nodeType":"150","messageId":"151","endLine":8,"endColumn":9},{"ruleId":"148","severity":1,"message":"184","line":9,"column":5,"nodeType":"150","messageId":"151","endLine":9,"endColumn":14},{"ruleId":"148","severity":1,"message":"185","line":10,"column":5,"nodeType":"150","messageId":"151","endLine":10,"endColumn":13},{"ruleId":"148","severity":1,"message":"186","line":11,"column":5,"nodeType":"150","messageId":"151","endLine":11,"endColumn":9},{"ruleId":"148","severity":1,"message":"187","line":12,"column":5,"nodeType":"150","messageId":"151","endLine":12,"endColumn":12},{"ruleId":"148","severity":1,"message":"188","line":13,"column":5,"nodeType":"150","messageId":"151","endLine":13,"endColumn":12},{"ruleId":"148","severity":1,"message":"163","line":17,"column":9,"nodeType":"150","messageId":"151","endLine":17,"endColumn":27},{"ruleId":"148","severity":1,"message":"189","line":18,"column":10,"nodeType":"150","messageId":"151","endLine":18,"endColumn":14},{"ruleId":"148","severity":1,"message":"190","line":23,"column":12,"nodeType":"150","messageId":"151","endLine":23,"endColumn":24},"@typescript-eslint/no-unused-vars","'store' is defined but never used.","Identifier","unusedVar","'StoreContext' is defined but never used.","no-native-reassign",["191"],"no-negated-in-lhs",["192"],"'PostList' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useContext' is defined but never used.","'useStore' is defined but never used.","'makeAutoObservable' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["193"],["191"],["192"],"'useState' is defined but never used.","'Label' is defined but never used.","'Modal' is defined but never used.","'Icon' is defined but never used.","'selectPost' is assigned a value but never used.","'deletePost' is assigned a value but never used.","'submitting' is assigned a value but never used.","'target' is assigned a value but never used.","'useEffect' is defined but never used.","'observer' is defined but never used.","'IActivity' is defined but never used.","'Item' is defined but never used.","'Segment' is defined but never used.","'Grid' is defined but never used.","'Container' is defined but never used.","'TextArea' is defined but never used.","'Form' is defined but never used.","'Message' is defined but never used.","'Divider' is defined but never used.","'Link' is defined but never used.","'openEditForm' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"194","fix":"195"},"Update the dependencies array to be: [loadActivity, match.params.id]",{"range":"196","text":"197"},[926,940],"[loadActivity, match.params.id]"]