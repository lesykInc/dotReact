[{"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\index.tsx":"1","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\api\\agent.ts":"4","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"5","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\activityStore.ts":"6","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\nav\\NavBar.tsx":"7","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"8","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"9","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"10","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"11"},{"size":540,"mtime":1612884386522,"results":"12","hashOfConfig":"13"},{"size":440,"mtime":1612884386522,"results":"14","hashOfConfig":"13"},{"size":889,"mtime":1613134493708,"results":"15","hashOfConfig":"13"},{"size":1178,"mtime":1613028809816,"results":"16","hashOfConfig":"13"},{"size":401,"mtime":1613030271340,"results":"17","hashOfConfig":"13"},{"size":3985,"mtime":1613140402035,"results":"18","hashOfConfig":"13"},{"size":879,"mtime":1613123502491,"results":"19","hashOfConfig":"13"},{"size":1127,"mtime":1613136830470,"results":"20","hashOfConfig":"13"},{"size":2224,"mtime":1613136883698,"results":"21","hashOfConfig":"13"},{"size":3504,"mtime":1613140323452,"results":"22","hashOfConfig":"13"},{"size":1495,"mtime":1613136903204,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"wm7pc1",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\index.tsx",[],["50","51"],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\api\\agent.ts",["52"],"import axios, {AxiosResponse }from 'axios';\r\nimport { IActivity } from '../models/activity';\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api';\r\n\r\nconst responseBody = (responce: AxiosResponse) => responce.data;\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) => \r\n    new Promise<AxiosResponse>(resolve => setTimeout(()=> resolve(response), ms))\r\n\r\n\r\nconst requests = {\r\n    get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(1000)).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(1000)).then(responseBody),\r\n    del: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (): Promise<IActivity[]> => requests.get('/activities'),\r\n    details: (id: string) => requests.get(`/activities/${id}`),\r\n    create: (activity: IActivity) => requests.post(`/activities`, activity),\r\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del(`/activities/${id}`)\r\n}\r\n\r\nexport default {\r\n    Activities\r\n}","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\app\\stores\\activityStore.ts",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\nav\\NavBar.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",["53"],"import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useContext } from 'react'\r\nimport { Grid } from 'semantic-ui-react';\r\nimport ActivityDetails from '../details/ActivityDetails';\r\nimport ActivityForm from '../form/ActivityForm';\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n    \r\n    const activityStore = useContext(ActivityStore);\r\n    const {editMode, selectedActivity} = activityStore;\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityList />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                {selectedActivity && !editMode && (\r\n                    <ActivityDetails />\r\n                    )}\r\n                {editMode && \r\n                <ActivityForm \r\n                    key={(selectedActivity && selectedActivity.id) || 0}\r\n                    activity={selectedActivity!}\r\n                /> }\r\n            </Grid.Column>\r\n        </Grid>    \r\n    );\r\n};\r\n\r\nexport default observer(ActivityDashboard)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",["54"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport { Item, Button, Label, Segment } from 'semantic-ui-react';\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\nimport {makeAutoObservable} from 'mobx';\r\n\r\nconst ActivityList: React.FC = () => {\r\n    \r\n    const activityStore = useContext(ActivityStore);\r\n    const {activitiesByDate, selectActivity, deleteActivity, submitting, target} = activityStore;\r\n    \r\n    return (\r\n        <Segment clearing>\r\n            <Item.Group divided>\r\n                {activitiesByDate.map(activity =>(\r\n                    <Item key={activity.id}>\r\n                        <Item.Content>\r\n                            <Item.Header as='a'>{activity.title}</Item.Header>\r\n                            <Item.Meta>{activity.date}</Item.Meta>\r\n                            <Item.Description>\r\n                                <div>{activity.decription}</div>\r\n                                <div>{activity.city}, {activity.venue}</div>\r\n                            </Item.Description>\r\n                            <Item.Extra>\r\n                                <Button\r\n                                    onClick={() => selectActivity(activity.id)} \r\n                                    floated='right' \r\n                                    content='View' \r\n                                    color='blue' \r\n                                />\r\n                                <Button\r\n                                    name={activity.id}\r\n                                    loading={target === activity.id && submitting}\r\n                                    onClick={(e) => deleteActivity(e, activity.id)}\r\n                                    floated='right'\r\n                                    content='Delete'\r\n                                    color='red'\r\n                                />\r\n                                <Label basic content={activity.category} />\r\n                            </Item.Extra>\r\n                        </Item.Content>\r\n                    </Item>\r\n                ))}\r\n                \r\n            </Item.Group>\r\n        </Segment>\r\n        \r\n    );\r\n};\r\n\r\nexport default observer(ActivityList)","C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",[],"C:\\Users\\lesyk\\RiderProjects\\dotReact\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":27,"column":1,"nodeType":"61","endLine":29,"endColumn":2},{"ruleId":"62","severity":1,"message":"63","line":2,"column":17,"nodeType":"64","messageId":"65","endLine":2,"endColumn":31},{"ruleId":"62","severity":1,"message":"66","line":5,"column":9,"nodeType":"64","messageId":"65","endLine":5,"endColumn":27},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'SyntheticEvent' is defined but never used.","Identifier","unusedVar","'makeAutoObservable' is defined but never used.","no-global-assign","no-unsafe-negation"]